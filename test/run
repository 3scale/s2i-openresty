#!/bin/bash
#
# The 'run' performs a simple test that verifies the S2I image.
# The main focus here is to exercise the S2I scripts.
#
# For more information see the documentation:
# https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
set -u

IMAGE_NAME=${IMAGE_NAME-s2i-openresty-centos7-candidate}

# Determining system utility executables (darwin compatibility check)
READLINK_EXEC="readlink"
MKTEMP_EXEC="mktemp"
if (echo "$OSTYPE" | egrep -qs 'darwin'); then
  ! type -a "greadlink" &>"/dev/null" || READLINK_EXEC="greadlink"
  ! type -a "gmktemp" &>"/dev/null" || MKTEMP_EXEC="gmktemp"
fi

test_dir="$($READLINK_EXEC -zf $(dirname "${BASH_SOURCE[0]}"))"
test_app=file://${test_dir}/test-app
image_dir=$($READLINK_EXEC -zf ${test_dir}/..)
scripts_url="file://${image_dir}/.s2i/bin"
cid_file=$($MKTEMP_EXEC -u --suffix=.cid)
runtime_cid_file=$(${MKTEMP_EXEC} -u --suffix=.cid)

# Since we built the candidate image locally, we don't want S2I to attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never --loglevel=2"

# Port the image exposes service to be tested
test_port=8090

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat $cid_file)
}

runtime_container_exists() {
  image_exists $(cat ${runtime_cid_file})
}

container_ip() {
  local cid=$1
  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat ${cid})
}

run_s2i_build() {
  s2i build --context-dir=gateway --incremental=true ${s2i_args} ${test_app} ${IMAGE_NAME} ${IMAGE_NAME}-testapp
}

run_s2i_runtime_build() {
  s2i build --context-dir=gateway ${s2i_args} --runtime-image=${IMAGE_NAME}-runtime ${test_app} ${IMAGE_NAME} ${IMAGE_NAME}-runtime-testapp
}

prepare_runtime() {
  if ! image_exists ${IMAGE_NAME}-runtime; then
    echo "ERROR: The image ${IMAGE_NAME}-runtime must exist before this script is executed."
    exit 1
  fi
}

prepare() {
  cleanup_image
  cleanup_runtime_image

  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # s2i build requires the application is a valid 'Git' repository
  pushd ${test_dir}/test-app >/dev/null

  # made the .git a symlink, see https://github.com/openshift/source-to-image/issues/606
  if ! [ -e .git ]; then
    echo "ERROR: Expected ${test_dir}/test-app to be a git repository."
    exit 1
  fi

  popd >/dev/null
  run_s2i_build
}

run_test_application() {
  set -o xtrace
  docker run --user 100001 --rm --cidfile=${cid_file} -p ${test_port} --env APICAST_ENVIRONMENT=staging --env THREESCALE_PORTAL_ENDPOINT=http://127.0.0.1 ${IMAGE_NAME}-testapp "$@"
}

run_runtime_test_application() {
  set -o xtrace
  docker run --user 100002 --rm --cidfile=${runtime_cid_file} -p ${test_port} --env APICAST_ENVIRONMENT=staging --env THREESCALE_PORTAL_ENDPOINT=http://127.0.0.1 ${IMAGE_NAME}-runtime-testapp "$@"
}

start_runtime_test_application() {
  cleanup_runtime

  run_runtime_test_application "$@" &
  wait_for_cid ${runtime_cid_file}
}

cleanup() {
  if [ -f $cid_file ]; then
    if container_exists; then
      docker stop $(cat $cid_file)
    fi
    rm "$cid_file"
  fi
}

cleanup_image() {
  if image_exists ${IMAGE_NAME}-testapp; then
    docker rmi ${IMAGE_NAME}-testapp
  fi
}

cleanup_runtime() {
  if [ -f ${runtime_cid_file} ]; then
    if runtime_container_exists; then
      docker stop $(cat ${runtime_cid_file})
    fi
    rm "${runtime_cid_file}"
  fi
}

cleanup_runtime_image() {
  if image_exists ${IMAGE_NAME}-runtime-testapp; then
    docker rmi ${IMAGE_NAME}-runtime-testapp
  fi
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    echo "S2I image '${IMAGE_NAME}' test FAILED (exit code: ${result})"
    cleanup
    exit $result
  fi
}

wait_for_cid() {
  local cid=$1
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    [ -f ${cid} ] && break
    echo "Waiting for container to start..."
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

test_usage() {
  echo "Testing 's2i usage'..."
  s2i usage ${s2i_args} ${IMAGE_NAME} &>/dev/null
}

test_connection() {
  echo "Testing HTTP connection..."
  local cid=$1
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  local timeout=5
  while [ $attempt -le $max_attempts ]; do
    local ip=$(container_ip ${cid})
    echo "Sending GET request to http://${ip}:${test_port}/"
    # response_code=$(curl -s -w %{http_code} --max-time ${timeout} -o /dev/null http://$(container_ip):${test_port}/)
    response_code=$(docker run --rm sequenceiq/alpine-curl curl -s -w %{http_code} --max-time ${timeout} -o /dev/null http://${ip}:${test_port}/status/live)
    status=$?
    if [ $status -eq 0 ]; then
      if [ $response_code -eq 200 ]; then
        result=0
      fi
      break
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  return $result
}

test_config() {
  local cid=$1
  echo "Testing nginx config ..."

  test=$(docker exec $(cat ${cid}) container-entrypoint apicast --test)

  return $?
}

test_temp() {
  local cid=$1
  echo "Testing nginx temp directory ..."

  test=$(docker exec --user 1000001 $(cat ${cid}) touch /usr/local/openresty/nginx/client_body_temp/test)

  return $?
}

test_top() {
  local cid=$1
  local id=$(cat ${cid})
  echo "Testing number of nginx processes ..."

  ps=$(docker top ${id} | tail -n +2)
  docker top ${id}

  openresty=$(echo ${ps} | grep -c 'nginx:')
  total=$(echo ${ps} | wc -l)

  [ $openresty -eq $total ]

  return $?
}

test_lib() {
  local cid=$1
  local lib=$2
  echo "Testing library $lib is available ..."

  test=$(docker exec $(cat ${cid}) container-entrypoint resty -e "require('ffi').load('$lib')")

  return $?
}

# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
prepare
run_s2i_build
check_result $?

# Verify the 'usage' script is working properly
test_usage
check_result $?

prepare_runtime
run_s2i_runtime_build
check_result $?

# Verify that the HTTP connection can be established to test application container
run_test_application &

# Wait for the container to write its CID file
wait_for_cid ${cid_file}

test_connection ${cid_file}
check_result $?

test_config ${cid_file}
check_result $?

test_temp ${cid_file}
check_result $?

test_top ${cid_file}
check_result $?

test_lib ${cid_file} jaegertracing
check_result $?

test_lib ${cid_file} opentracing
check_result $?

cleanup

start_runtime_test_application

test_connection ${runtime_cid_file}
check_result $?

test_top ${runtime_cid_file}
check_result $?

start_runtime_test_application /usr/libexec/s2i/run
test_connection ${runtime_cid_file}
check_result $?

test_lib ${runtime_cid_file} jaegertracing
check_result $?

test_lib ${runtime_cid_file} opentracing
check_result $?

cleanup_runtime
